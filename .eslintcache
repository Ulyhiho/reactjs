[{"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\01-starting-setup\\src\\index.js":"1","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\01-starting-setup\\src\\App.js":"2","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\index.js":"3","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\App.js":"4","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\UpdateContact.js":"5","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\AddContact.js":"6","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\Header.js":"7","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\ViewContact.js":"8","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\DeleteContact.js":"9"},{"size":205,"mtime":1634203607007,"results":"10","hashOfConfig":"11"},{"size":125,"mtime":1634473837262,"results":"12","hashOfConfig":"11"},{"size":205,"mtime":1634203607007,"results":"13","hashOfConfig":"14"},{"size":680,"mtime":1635226232713,"results":"15","hashOfConfig":"14"},{"size":6309,"mtime":1635441012105,"results":"16","hashOfConfig":"14"},{"size":12687,"mtime":1635439124722,"results":"17","hashOfConfig":"14"},{"size":221,"mtime":1635401870978,"results":"18","hashOfConfig":"14"},{"size":1935,"mtime":1635440668924,"results":"19","hashOfConfig":"14"},{"size":2514,"mtime":1635440918148,"results":"20","hashOfConfig":"14"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1h0ksqc",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"cqmglr",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\01-starting-setup\\src\\index.js",[],["42","43"],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\01-starting-setup\\src\\App.js",[],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\index.js",[],["44","45"],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\App.js",[],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\UpdateContact.js",[],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\AddContact.js",["46","47"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport validator from \"validator\";\r\nimport dayjs from \"dayjs\";\r\nimport \"./style/addContact.css\";\r\n\r\nexport default class ContactList extends React.Component {\r\n  state = {\r\n    contactInfo: [],\r\n    indexID: \"\",\r\n    curr: 0,\r\n    errors: {\r\n      nameError: \"\",\r\n      emailError: \"\",\r\n      contactError: \"\",\r\n      locationError: \"\",\r\n      regDateError: \"\",\r\n    },\r\n    currentPage: 1,\r\n    contactPerPage: 5,\r\n  };\r\n\r\n  //save contact to localstorage\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const json = JSON.stringify(this.state.contactInfo);\r\n    localStorage.setItem(\"contactInfo\", json);\r\n  }\r\n  //fetch contactinfo\r\n  componentDidMount() {\r\n    try {\r\n      const json = localStorage.getItem(\"contactInfo\");\r\n      const contactInfo = JSON.parse(json);\r\n      if (contactInfo) {\r\n        this.setState(() => ({ contactInfo }));\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Component Did Mount Error\");\r\n    }\r\n  }\r\n  handleClickButton = (event) => {\r\n    let set = event.target.id;\r\n    this.setState({ currentPage: set });\r\n  };\r\n\r\n  //clears input when contact is validated\r\n  validation = () => {\r\n    let valid = true,\r\n      name = \"\",\r\n      email = \"\",\r\n      contact = \"\",\r\n      location = \"\",\r\n      regDate = \"\";\r\n\r\n    //Name\r\n    if (this.refs.fullname.value.length >= 30) {\r\n      name = \"Full Name field accept up to 30 in size only\";\r\n      valid = false;\r\n    } else if (typeof this.refs.fullname.value !== \"undefined\") {\r\n      if (!this.refs.fullname.value.match(/^[,.a-zA-Z\\s]*$/)) {\r\n        name = \"Full Name field accept characters values only\";\r\n        valid = false;\r\n      }\r\n    }\r\n    if (!this.refs.fullname.value) {\r\n      name = \"Full Name field cannot be blank\";\r\n      valid = false;\r\n    }\r\n\r\n    //Email Address\r\n    if (!this.refs.email.value) {\r\n      email = \"Email Address field cannot be blank\";\r\n      valid = false;\r\n    } else if (!validator.isEmail(this.refs.email.value)) {\r\n      email = \"Email Address field should have email domain\";\r\n      valid = false;\r\n    } else if (this.refs.email.value.length >= 45) {\r\n      email = \"Email Address field accept up to 45 in size only\";\r\n      valid = false;\r\n    }\r\n\r\n    //Contact Number\r\n    if (this.refs.contact.value.length === 0) {\r\n      contact = \"Contact Number field cannot be blank\";\r\n      valid = false;\r\n    } else if (this.refs.contact.value.length !== 11) {\r\n      contact = \"Contact Number field accept up to 11 in size only\";\r\n      valid = false;\r\n    }\r\n    if (typeof this.refs.contact.value !== \"undefined\") {\r\n      if (!this.refs.contact.value.match(/^[0-9]*$/)) {\r\n        contact = \"Contact Number field accept numeric values only\";\r\n        valid = false;\r\n      }\r\n    }\r\n\r\n    //Location\r\n    if (!this.refs.location.value) {\r\n      location = \"Location field cannot be blank\";\r\n      valid = false;\r\n    }\r\n\r\n    //Date\r\n    if (!this.refs.regdate.value) {\r\n      regDate = \"Registered Date field cannot be blank\";\r\n      valid = false;\r\n    } else if (\r\n      this.refs.regdate.value !== dayjs(new Date()).format(\"YYYY-MM-DD\")\r\n    ) {\r\n      regDate = \"Registered date field accept current date only.\";\r\n      valid = false;\r\n    }\r\n    if (!valid) {\r\n      this.setState({\r\n        errors: {\r\n          nameError: name,\r\n          emailError: email,\r\n          contactError: contact,\r\n          locationError: location,\r\n          regDateError: regDate,\r\n        },\r\n      });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  //Button functions.\r\n  handleAddContact = (e) => {\r\n    let contactInfo = this.state.contactInfo;\r\n    const fullname = this.refs.fullname.value;\r\n    const email = this.refs.email.value;\r\n    const contact = this.refs.contact.value;\r\n    const location = this.refs.location.value;\r\n    const regdate = dayjs(this.refs.regdate.value).format(\"MM/DD/YYYY\");\r\n\r\n    this.setState({\r\n      errors: {\r\n        nameError: \"\",\r\n        emailError: \"\",\r\n        contactError: \"\",\r\n        locationError: \"\",\r\n        regDateError: \"\",\r\n      },\r\n    });\r\n\r\n    const isValid = this.validation(e);\r\n    if (isValid) {\r\n      if (this.state.curr === 0) {\r\n        let completeContactInfo = {\r\n          fullname,\r\n          email,\r\n          contact,\r\n          location,\r\n          regdate,\r\n        };\r\n        contactInfo.push(completeContactInfo);\r\n      } else {\r\n        let indexID = this.state.indexID;\r\n        contactInfo[indexID].name = fullname;\r\n        contactInfo[indexID].email = email;\r\n        contactInfo[indexID].contact = contact;\r\n        contactInfo[indexID].location = location;\r\n        contactInfo[indexID].regdate = regdate;\r\n      }\r\n\r\n      this.setState({\r\n        curr: 0,\r\n        contactInfo: contactInfo,\r\n      });\r\n    }\r\n\r\n    //user input\r\n    this.refs.fullname.value = \"\";\r\n    this.refs.email.value = \"\";\r\n    this.refs.contact.value = \"\";\r\n    this.refs.location.value = \"\";\r\n    this.refs.regdate.value = \"\";\r\n  };\r\n\r\n  handlePagination = (event) => {\r\n    let set = event.target.id;\r\n    this.setState({ currentPage: set });\r\n  };\r\n\r\n  // Paging\r\n  render() {\r\n    const { currentPage } = this.state;\r\n    const LastContact = currentPage * 5;\r\n    const FirstContact = LastContact - 5;\r\n    const currentContacts = this.state.contactInfo.slice(\r\n      FirstContact,\r\n      LastContact\r\n    );\r\n    const setID = (currentPage - 1) * 5;\r\n\r\n    //Table UI\r\n    const generateContactInfo = currentContacts.map((contactInfo, indexID) => {\r\n      return (\r\n        <tr key={indexID}>\r\n          <th scope=\"row\">{indexID + 1 + setID}</th>\r\n          <td>{contactInfo.fullname}</td>\r\n          <td>{contactInfo.email}</td>\r\n          <td>{contactInfo.contact}</td>\r\n          <td>{contactInfo.location}</td>\r\n          <td>{contactInfo.regdate}</td>\r\n          <td>\r\n            <div className=\"d-grid gap-2 d-md-block\">\r\n              <Link\r\n                className=\"btn view-btn-color\"\r\n                to={{ pathname: \"view\", state: { id: indexID + setID } }}\r\n              >\r\n                View\r\n              </Link>\r\n              <Link\r\n                className=\"btn update-btn-color\"\r\n                to={{ pathname: \"update\", state: { id: indexID + setID } }}\r\n              >\r\n                Update\r\n              </Link>\r\n              <Link\r\n                className=\"btn delete-btn-color\"\r\n                to={{ pathname: \"delete\", state: { id: indexID + setID } }}\r\n              >\r\n                Delete\r\n              </Link>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n\r\n    //Paging length generator\r\n    const pageNumbers = [];\r\n    for (let i = 1; i <= Math.ceil(this.state.contactInfo.length / 5); i++) {\r\n      pageNumbers.push(i);\r\n    }\r\n    pageNumbers.map((pageNum) => {\r\n      return (\r\n        <button\r\n          className=\"btn btn-outline-dark\"\r\n          key={pageNum}\r\n          id={pageNum}\r\n          onClick={this.handlePagination}\r\n        >\r\n          {pageNum}\r\n        </button>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"row justify-content-md-center\">\r\n          <div className=\"col-sm-3 backGround\">\r\n            <br />\r\n            <br />\r\n            <form ref=\"myForm\" className=\"myForm \">\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Full Name</label>\r\n                <input\r\n                  className=\"font-italic form-control\"\r\n                  placeholder=\"Last Name, First Name Middle Initial\"\r\n                  type=\"text\"\r\n                  ref=\"fullname\"\r\n                  defaultValue=\"\"\r\n                />\r\n\r\n                {this.state.errors[\"nameError\"] ? (\r\n                  <p style={{ color: \"red\" }}>\r\n                    {this.state.errors[\"nameError\"]}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Email Address</label>\r\n                <input\r\n                  className=\"font-italic form-control\"\r\n                  placeholder=\"example@email.com\"\r\n                  type=\"text\"\r\n                  ref=\"email\"\r\n                />\r\n\r\n                {this.state.errors[\"emailError\"] ? (\r\n                  <p style={{ color: \"red\" }}>\r\n                    {this.state.errors[\"emailError\"]}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Contact Number</label>\r\n                <input\r\n                  className=\"font-italic form-control\"\r\n                  placeholder=\"99999999999\"\r\n                  type=\"text\"\r\n                  ref=\"contact\"\r\n                  required\r\n                />\r\n\r\n                {this.state.errors[\"contactError\"] ? (\r\n                  <p style={{ color: \"red\" }}>\r\n                    {this.state.errors[\"contactError\"]}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Location</label>\r\n                <select\r\n                  className=\"font-italic form-select\"\r\n                  type=\"text\"\r\n                  ref=\"location\"\r\n                >\r\n                  <option value=\"\">Select Location</option>\r\n                  <option value=\"Manila\">Manila</option>\r\n                  <option value=\"Cebu\">Cebu</option>\r\n                </select>\r\n\r\n                {this.state.errors[\"locationError\"] ? (\r\n                  <p style={{ color: \"red\" }}>\r\n                    {this.state.errors[\"locationError\"]}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <label className=\"form-label\">Registered Date: </label>\r\n                <br />\r\n                <input\r\n                  type=\"date\"\r\n                  ref=\"regdate\"\r\n                  className=\"font-italic form-control\"\r\n                />\r\n                <br />\r\n                {this.state.errors[\"regDateError\"] ? (\r\n                  <p style={{ color: \"red\" }}>\r\n                    {this.state.errors[\"regDateError\"]}\r\n                  </p>\r\n                ) : null}\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={(e) => this.handleAddContact(e)}\r\n                >\r\n                  Add Contact\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-auto view\">\r\n            <br></br>\r\n            <br></br>\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Id</th>\r\n                  <th>Full Name</th>\r\n                  <th>Email Address</th>\r\n                  <th>Contact Number</th>\r\n                  <th>Location</th>\r\n                  <th>Registered Date</th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>{generateContactInfo}</tbody>\r\n            </table>\r\n            <br />\r\n            <div style={{ textAlign: \"center\" }}>\r\n              <button\r\n                className=\"btn btn-color btn-sm\"\r\n                key={\r\n                  Number(this.state.currentPage) === 1\r\n                    ? (this.state.currentPage = 1)\r\n                    : this.state.currentPage - 1\r\n                }\r\n                id={\r\n                  this.state.currentPage === 1\r\n                    ? (this.state.currentPage = 1)\r\n                    : this.state.currentPage - 1\r\n                }\r\n                onClick={this.handleClickButton}\r\n              >\r\n                &#60;\r\n              </button>\r\n              &nbsp; &nbsp; Showing {generateContactInfo.length} of{\" \"}\r\n              {this.state.contactInfo.length}&nbsp; &nbsp;\r\n              <button\r\n                className=\"btn btn-color btn-sm\"\r\n                style={{ textAlign: \"center\" }}\r\n                key={\r\n                  Number(currentPage) === Number(pageNumbers.length)\r\n                    ? Number(currentPage)\r\n                    : Number(currentPage) + 1\r\n                }\r\n                id={\r\n                  Number(currentPage) === Number(pageNumbers.length)\r\n                    ? Number(currentPage)\r\n                    : Number(currentPage) + 1\r\n                }\r\n                onClick={this.handleClickButton}\r\n              >\r\n                &#62;\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\Header.js",[],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\ViewContact.js",[],"C:\\Users\\Mark Ulysses\\OneDrive\\Desktop\\PUTANGINA ETO NA\\ReactJs-mark.u.reolalas\\src\\components\\DeleteContact.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":372,"column":24,"nodeType":"56","messageId":"57","endLine":372,"endColumn":34},{"ruleId":"54","severity":1,"message":"55","line":377,"column":24,"nodeType":"56","messageId":"57","endLine":377,"endColumn":34},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],["58"],["59"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-global-assign","no-unsafe-negation"]